'use client'

import { useState, useEffect } from 'react'
import { Building2, Users, Calendar, Target, TrendingUp, Phone, Mail, CheckCircle, DollarSign, Home, Clock } from 'lucide-react'
import ContactInfoCard from './ContactInfoCard'
import { Contact } from '../types'

interface Property {
  id: string
  fields: {
    Address: string
    'Asking Price'?: number
    'ARV Estimate'?: number
    'Repair Estimate'?: number
    'Property Type'?: string
    'Deal Stage'?: string
    'Days on Market'?: number
    Notes?: string
  }
}

interface Activity {
  id: string
  fields: {
    'Next Action': string
    'Activity Type': string
    Date?: string
    'Name (from Contact)'?: string[]
    'Address (from Property)'?: string[]
    Status?: string
  }
}

export default function Dashboard() {
  const [properties, setProperties] = useState<Property[]>([])
  const [contacts, setContacts] = useState<Contact[]>([])
  const [activities, setActivities] = useState<Activity[]>([])
  const [loading, setLoading] = useState(true)
  const [selectedContact, setSelectedContact] = useState<{contact: Contact | null, type: 'email' | 'phone' | null}>({ contact: null, type: null })

  useEffect(() => {
    async function fetchData() {
      try {
        const [propertiesRes, contactsRes, activitiesRes] = await Promise.all([
          fetch('/api/properties').then(res => res.json()),
          fetch('/api/contacts').then(res => res.json()),
          fetch('/api/activities').then(res => res.json())
        ])
        
        setProperties(propertiesRes.data || [])
        setContacts(contactsRes.data || [])
        setActivities(activitiesRes.data || [])
      } catch (error) {
        console.error('Error fetching data:', error)
      } finally {
        setLoading(false)
      }
    }
    
    fetchData()
  }, [])

  const completeActivity = async (activityId: string) => {
    try {
      const response = await fetch('/api/activities/complete', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ recordId: activityId })
      })

      if (!response.ok) {
        throw new Error('Failed to complete activity')
      }

      // Refresh activities
      const activitiesRes = await fetch('/api/activities').then(res => res.json())
      setActivities(activitiesRes.data || [])
    } catch (error) {
      console.error('Error completing activity:', error)
    }
  }

  // Stat Card Component
  const StatCard = ({ 
    title, 
    value, 
    icon, 
    color 
  }: { 
    title: string; 
    value: string; 
    icon: React.ReactNode; 
    color: string 
  }) => {
    const colorClasses = {
      blue: 'bg-blue-500 text-white',
      green: 'bg-green-500 text-white',
      purple: 'bg-purple-500 text-white',
      orange: 'bg-orange-500 text-white',
      red: 'bg-red-500 text-white',
      yellow: 'bg-yellow-500 text-white',
    } as const;

    return (
      <div className="bg-white rounded-lg shadow p-6">
        <div className="flex items-center">
          <div className={`flex-shrink-0 p-3 rounded-lg ${colorClasses[color as keyof typeof colorClasses]}`}>
            {icon}
          </div>
          <div className="ml-4">
            <p className="text-sm font-medium text-gray-500">{title}</p>
            <p className="text-2xl font-semibold text-gray-900">{value}</p>
          </div>
        </div>
      </div>
    );
  };

  // Helper function for deal stage colors
  const getDealStageColor = (stage: string) => {
    switch (stage) {
      case 'Lead':
        return 'bg-blue-100 text-blue-800';
      case 'Prospect':
        return 'bg-yellow-100 text-yellow-800';
      case 'Under Contract':
        return 'bg-purple-100 text-purple-800';
      case 'Closed':
        return 'bg-green-100 text-green-800';
      case 'Dead':
        return 'bg-red-100 text-red-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  // Calculate stats
  const stats = {
    totalProperties: properties.length,
    totalContacts: contacts.length,
    totalDealValue: properties.reduce((sum, p) => sum + (p.fields['Asking Price'] || 0), 0),
    avgDaysOnMarket: properties.length > 0 
      ? Math.round(properties.reduce((sum, p) => sum + (p.fields['Days on Market'] || 0), 0) / properties.length)
      : 0,
    hotLeads: contacts.filter(c => c.fields.Temperature === 'Hot').length,
    overdueActivities: activities.filter(a => {
      if (!a.fields.Date || a.fields.Status === 'Completed') return false;
      const activityDate = new Date(a.fields.Date);
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      return activityDate < today;
    }).length
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto"></div>
          <p className="mt-4 text-gray-600">Loading dashboard...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="py-6">
            <h1 className="text-3xl font-bold text-gray-900">Real Estate CRM Dashboard</h1>
            <p className="mt-2 text-gray-600">Your complete property and contact management system</p>
          </div>
        </div>
      </div>

      {/* Stats */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-6 gap-6">
          <StatCard 
            title="Total Properties" 
            value={stats.totalProperties.toString()} 
            icon={<Home className="h-6 w-6" />} 
            color="blue" 
          />
          <StatCard 
            title="Total Contacts" 
            value={stats.totalContacts.toString()} 
            icon={<Users className="h-6 w-6" />} 
            color="green" 
          />
          <StatCard 
            title="Total Deal Value" 
            value={`$${stats.totalDealValue.toLocaleString()}`} 
            icon={<DollarSign className="h-6 w-6" />} 
            color="purple" 
          />
          <StatCard 
            title="Avg. Days on Market" 
            value={stats.avgDaysOnMarket.toString()} 
            icon={<Clock className="h-6 w-6" />} 
            color="orange" 
          />
          <StatCard 
            title="Hot Leads" 
            value={stats.hotLeads.toString()} 
            icon={<Target className="h-6 w-6" />} 
            color="red" 
          />
          <StatCard 
            title="Overdue Activities" 
            value={stats.overdueActivities.toString()} 
            icon={<Calendar className="h-6 w-6" />} 
            color="yellow" 
          />
        </div>
      </div>

      {/* Main Content */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pb-12">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Properties */}
          <div className="lg:col-span-2">
            <div className="bg-white shadow rounded-lg overflow-hidden">
              <div className="px-6 py-5 border-b border-gray-200">
                <h2 className="text-lg font-medium text-gray-900">Properties</h2>
              </div>
              <div className="divide-y divide-gray-200">
                {properties.slice(0, 5).map((property) => (
                  <div key={property.id} className="px-6 py-4 hover:bg-gray-50">
                    <div className="flex items-center justify-between">
                      <div>
                        <h3 className="text-sm font-medium text-gray-900">{property.fields.Address}</h3>
                        <p className="text-sm text-gray-500">{property.fields['Property Type']}</p>
                      </div>
                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getDealStageColor(property.fields['Deal Stage'] || '')}`}>
                        {property.fields['Deal Stage'] || 'No Stage'}
                      </span>
                    </div>
                    <div className="mt-2 flex justify-between items-center">
                      <p className="text-sm text-gray-900">
                        ${property.fields['Asking Price']?.toLocaleString() || 'N/A'}
                      </p>
                      <div className="flex space-x-2">
                        <button className="text-blue-600 hover:text-blue-800 text-sm font-medium">
                          View
                        </button>
                        <button className="text-indigo-600 hover:text-indigo-800 text-sm font-medium">
                          Edit
                        </button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
              <div className="bg-gray-50 px-6 py-3 text-right">
                <a href="/properties" className="text-sm font-medium text-indigo-600 hover:text-indigo-500">
                  View all properties
                </a>
              </div>
            </div>
          </div>

          {/* Hot Contacts */}
          <div>
            <div className="bg-white shadow rounded-lg overflow-hidden">
              <div className="px-6 py-5 border-b border-gray-200">
                <h2 className="text-lg font-medium text-gray-900">Hot Contacts</h2>
              </div>
              <div className="divide-y divide-gray-200">
                {contacts
                  .filter(contact => contact.fields.Temperature === 'Hot')
                  .slice(0, 5)
                  .map((contact) => (
                    <div key={contact.id} className="px-6 py-4 hover:bg-gray-50">
                      <div className="flex items-center justify-between">
                        <div>
                          <h3 className="text-sm font-medium text-gray-900">{contact.fields.Name}</h3>
                          <p className="text-sm text-gray-500">{contact.fields['Contact Type']}</p>
                        </div>
                        <div className="flex items-center space-x-2">
                          {contact.fields.Email && (
                            <button 
                              onClick={() => setSelectedContact({ contact, type: 'email' })}
                              className="p-2 text-gray-400 hover:text-blue-600 transition-colors"
                            >
                              <Mail className="h-4 w-4" />
                            </button>
                          )}
                          {contact.fields['Phone Number'] && (
                            <button 
                              onClick={() => setSelectedContact({ contact, type: 'phone' })}
                              className="p-2 text-gray-400 hover:text-green-600 transition-colors"
                            >
                              <Phone className="h-4 w-4" />
                            </button>
                          )}
                        </div>
                      </div>
                      {contact.fields['Last Contact Date'] && (
                        <p className="mt-2 text-xs text-gray-500">
                          Last contact: {new Date(contact.fields['Last Contact Date']).toLocaleDateString()}
                        </p>
                      )}
                    </div>
                  ))}
              </div>
              <div className="bg-gray-50 px-6 py-3 text-right">
                <a href="/contacts" className="text-sm font-medium text-indigo-600 hover:text-indigo-500">
                  View all contacts
                </a>
              </div>
            </div>

            {/* Overdue Activities */}
            <div className="mt-6 bg-white shadow rounded-lg overflow-hidden">
              <div className="px-6 py-5 border-b border-gray-200">
                <h2 className="text-lg font-medium text-gray-900">Overdue Activities</h2>
              </div>
              <div className="divide-y divide-gray-200">
                {activities
                  .filter(a => {
                    if (!a.fields.Date || a.fields.Status === 'Completed') return false;
                    const activityDate = new Date(a.fields.Date);
                    const today = new Date();
                    today.setHours(0, 0, 0, 0);
                    return activityDate < today;
                  })
                  .slice(0, 5)
                  .map((activity) => (
                    <div key={activity.id} className="group flex items-center justify-between p-4 hover:bg-yellow-50">
                      <div className="flex-1">
                        <h4 className="font-medium text-gray-900">{activity.fields['Next Action']}</h4>
                        <p className="text-sm text-gray-600">
                          {activity.fields['Name (from Contact)']?.[0] || 'No Contact'} • 
                          {activity.fields['Address (from Property)']?.[0] || 'No Property'}
                        </p>
                        <div className="flex items-center mt-1">
                          <span className="text-sm text-red-600 font-medium">
                            {activity.fields['Activity Type']}
                          </span>
                          <span className="mx-2 text-gray-300">•</span>
                          <p className="text-xs text-gray-500">
                            Due: {activity.fields.Date && new Date(activity.fields.Date).toLocaleDateString()}
                          </p>
                        </div>
                      </div>
                      <button
                        onClick={() => completeActivity(activity.id)}
                        className="opacity-0 group-hover:opacity-100 transition-opacity px-3 py-1 bg-green-600 text-white text-sm rounded-md hover:bg-green-700 flex items-center"
                      >
                        <CheckCircle className="h-4 w-4 mr-1" />
                        Complete
                      </button>
                    </div>
                  ))}
                
                {activities.filter(a => {
                  if (!a.fields.Date || a.fields.Status === 'Completed') return false;
                  const activityDate = new Date(a.fields.Date);
                  const today = new Date();
                  today.setHours(0, 0, 0, 0);
                  return activityDate < today;
                }).length === 0 && (
                  <div className="text-center py-8 text-gray-500">
                    <Calendar className="h-12 w-12 mx-auto mb-4 text-gray-300" />
                    <p>No overdue activities!</p>
                  </div>
                )}
              </div>
              <div className="bg-gray-50 px-6 py-3 text-right">
                <a href="/activities" className="text-sm font-medium text-indigo-600 hover:text-indigo-500">
                  View all activities
                </a>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Contact Info Card Modal */}
      {selectedContact.contact && selectedContact.type && (
        <ContactInfoCard 
          contact={selectedContact.contact} 
          type={selectedContact.type}
          onClose={() => setSelectedContact({ contact: null, type: null })}
        />
      )}
    </div>
  )
}

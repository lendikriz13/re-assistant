// src/app/api/properties/create/route.ts
import { NextRequest, NextResponse } from 'next/server'

interface PropertyFormData {
  address: string
  askingPrice: number | ''
  propertyType: string
  dealStage: string
  arvEstimate: number | ''
  repairEstimate: number | ''
  notes: string
  contactName: string
  contactEmail: string
  contactPhone: string
  contactType: string
}

interface AirtableRecord<T> {
  id: string
  createdTime: string
  fields: T
}

interface ContactFields {
  Name: string
  'Email'?: string
  'Phone Number'?: string
  'Contact Type'?: string
  'Last Contact Date'?: string
  'Notes'?: string
}

interface PropertyFields {
  'Address': string
  'Asking Price'?: number
  'Property Type'?: string
  'Deal Stage'?: string
  'ARV Estimate'?: number
  'Repair Estimate'?: number
  'Notes'?: string
  'Contact'?: string[]
  'Days on Market'?: number
}

interface AirtableResponse<T> {
  records: Array<AirtableRecord<T>>
  error?: {
    message: string
  }
}

export async function POST(request: NextRequest) {
  try {
    const formData: PropertyFormData = await request.json()

    // First, create or find the contact
    let contactId: string | null = null
    
    if (formData.contactName) {
      // Check if contact already exists
      const existingContactResponse = await fetch(
        `https://api.airtable.com/v0/${process.env.NEXT_PUBLIC_AIRTABLE_BASE_ID}/Contacts?filterByFormula={Name}="${encodeURIComponent(formData.contactName)}"`,
        {
          headers: {
            'Authorization': `Bearer ${process.env.AIRTABLE_PERSONAL_ACCESS_TOKEN}`,
          },
        }
      )

      if (!existingContactResponse.ok) {
        throw new Error('Failed to check existing contacts')
      }

      const existingContact = await existingContactResponse.json() as AirtableResponse<ContactFields>

      if (existingContact.records && existingContact.records.length > 0) {
        // Use existing contact
        contactId = existingContact.records[0].id
      } else {
        // Create new contact
        const newContactResponse = await fetch(
          `https://api.airtable.com/v0/${process.env.NEXT_PUBLIC_AIRTABLE_BASE_ID}/Contacts`,
          {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${process.env.AIRTABLE_PERSONAL_ACCESS_TOKEN}`,
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              records: [{
                fields: {
                  'Name': formData.contactName,
                  'Email': formData.contactEmail || undefined,
                  'Phone Number': formData.contactPhone || undefined,
                  'Contact Type': formData.contactType || 'Lead',
                  'Last Contact Date': new Date().toISOString().split('T')[0]
                }
              }]
            })
          }
        )

        if (!newContactResponse.ok) {
          throw new Error('Failed to create contact')
        }

        const newContact = await newContactResponse.json() as AirtableResponse<ContactFields>
        contactId = newContact.records[0].id
      }
    }

    // Create the property
    const propertyData: PropertyFields = {
      'Address': formData.address,
      'Property Type': formData.propertyType || undefined,
      'Deal Stage': formData.dealStage || 'Lead',
      'Notes': formData.notes || undefined,
      'Days on Market': 0
    }

    // Add numeric fields if they have values
    if (formData.askingPrice !== '') {
      propertyData['Asking Price'] = Number(formData.askingPrice)
    }
    if (formData.arvEstimate !== '') {
      propertyData['ARV Estimate'] = Number(formData.arvEstimate)
    }
    if (formData.repairEstimate !== '') {
      propertyData['Repair Estimate'] = Number(formData.repairEstimate)
    }

    // Link to contact if available
    if (contactId) {
      propertyData.Contact = [contactId]
    }

    const propertyResponse = await fetch(
      `https://api.airtable.com/v0/${process.env.NEXT_PUBLIC_AIRTABLE_BASE_ID}/Properties`,
      {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${process.env.AIRTABLE_PERSONAL_ACCESS_TOKEN}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          records: [{
            fields: propertyData
          }]
        })
      }
    )

    if (!propertyResponse.ok) {
      const error = await propertyResponse.json()
      throw new Error(error.error?.message || 'Failed to create property')
    }

    const property = await propertyResponse.json()
    return NextResponse.json({ 
      success: true, 
      property: property.records[0],
      message: 'Property created successfully'
    })

  } catch (error: unknown) {
    const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred'
    console.error('Error creating property:', errorMessage)
    return NextResponse.json(
      { 
        error: 'Failed to create property',
        details: errorMessage 
      },
      { status: 500 }
    )
  }
}
